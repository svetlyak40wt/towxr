#!/usr/bin/python 
# -*- coding: utf-8 -*-
# (C) 2010 K-Medi B
# written by K-Medi B
# http://hackadmin.com/khaled
 
import csv
import sys
import os.path


# Function that adds the Header of the wxr file ______________
def Header():

		File_Header= 	'''<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log in to that blog as an administrator. -->
<!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress/3.0.1" created="2010-11-18 15:07"-->
<rss version="2.0"
xmlns:excerpt="http://wordpress.org/export/1.0/excerpt/"
xmlns:content="http://purl.org/rss/1.0/modules/content/"
xmlns:wfw="http://wellformedweb.org/CommentAPI/"
xmlns:dc="http://purl.org/dc/elements/1.1/"
xmlns:wp="http://wordpress.org/export/1.0/"
>
	<channel>'''
		return File_Header

# END OF THE Function that adds the Header of the wxr file ______________







# Function that Close the the Header of the wxr file ______________
def Footer():
			File_Footer='''
	</channel>
</rss>'''
			return File_Footer
# END OF THE Function that adds the Header of the wxr file ______________








# Funtion that replace spaces with dashs _________________________

def Add_Dash(string):
				i=0
				string1=''
				while i<len(string):
					if string[i]!=' ':
						string1=string1+string[i]
					if string[i]==' ':
						string1=string1+'-'					
					i=i+1
				return string1

# End of Funtion that replace spaces with dashs ___________________










# Funtion that creates tags that are in the same string separated by comas
#tag field example from DB: tag1, tag2, tag3, tag4
# the tag4 = (IT services, Cloud computing, grid computing)
#  tag1, tag2, tag3, (IT services, Cloud computing, grid computing)

def tags(string):

				bra=0
				Multags=''
				i=0
				tag=''
				while i<len(string):
					if string[i]=='(':# if there is an open bracket and inside the brakets there is coma we don't take this as a tag
						bra=1;
					elif string[i]==')':# elif the last bracket was closed and we meet a coma we take this as tag
						bra=0;
					if string[i]!=',':# extract tag while there is no coma
						tag=tag+string[i]
					if ( ((string[i]==',') or ( i == len(string)-1 ) )and (len(tag) > 0) and bra==0 ):# if there is coma and the last bracket is closed we take the tag
						if tag[0]==' ':#we take off first blank
							tag=tag[1:]
						Multags=Multags+'''
\t\t\t\t<category domain="tag"><![CDATA['''+tag+''']]></category>
\t\t\t\t<category domain="tag" nicename="'''+Add_Dash(tag)+'''"><![CDATA['''+tag+''']]></category>
												'''
						tag=''						
						bra=0


					i=i+1
				return Multags

# End Funtion that creates tags ___________________________________










# Funtion that creates posts_______________________________________

def Item(cust_field_ref,cust_field_attach,post_title,
					post_category, cust_field_pub_date,cust_field_source,
					cust_field_sourceurl,post_excerpt, post_tags,post_post,creator):
				
				
				post='''\n\n

			<item>
				<title>'''+post_title+'''</title>
				<link></link>
				<pubDate>'''+cust_field_pub_date+'''</pubDate>
				<dc:creator><![CDATA['''+creator+''']]></dc:creator>
				<category domain="category" nicename="'''+Add_Dash(post_category)+'''"><![CDATA['''+post_category+''']]></category>
				<category><![CDATA['''+post_category+''']]></category>\n
				'''+tags(post_tags)+'''
				<guid isPermaLink="false"></guid>
				<description></description>
				<content:encoded><![CDATA['''+post_post+''']]></content:encoded>
				<excerpt:encoded><![CDATA['''+post_excerpt+''']]></excerpt:encoded>
				<wp:post_id></wp:post_id><wp:post_date>'''+cust_field_pub_date+'''</wp:post_date>
				<wp:post_date_gmt>'''+cust_field_pub_date+'''</wp:post_date_gmt>
				<wp:comment_status>open</wp:comment_status>
				<wp:ping_status>open</wp:ping_status>
				<wp:post_name>'''+Add_Dash(post_title)+'''</wp:post_name>
				<wp:status>publish</wp:status>
				<wp:post_parent>0</wp:post_parent>
				<wp:menu_order>0</wp:menu_order>
				<wp:post_type>post</wp:post_type>
				<wp:post_password></wp:post_password>
				<wp:is_sticky>0</wp:is_sticky>

				<wp:postmeta>
						<wp:meta_key>_referenceid</wp:meta_key>
						<wp:meta_value><![CDATA['''+cust_field_ref+''']]></wp:meta_value>
				</wp:postmeta>

				<wp:postmeta>
					<wp:meta_key>_attachment</wp:meta_key>
					<wp:meta_value><![CDATA['''+cust_field_attach+''']]></wp:meta_value>
				</wp:postmeta>

				<wp:postmeta>
					<wp:meta_key>_publish_date</wp:meta_key>
					<wp:meta_value><![CDATA['''+cust_field_pub_date+''']]></wp:meta_value>
				</wp:postmeta>

				<wp:postmeta>
					<wp:meta_key>_source</wp:meta_key>
					<wp:meta_value><![CDATA['''+cust_field_source+''']]></wp:meta_value>
				</wp:postmeta>

				<wp:postmeta>
					<wp:meta_key>_sourceurl</wp:meta_key>
					<wp:meta_value><![CDATA['''+cust_field_sourceurl+''']]></wp:meta_value>
				</wp:postmeta>

			</item>\n\n

'''


				return post

# End of Funtion that creates posts____________________________________










# Main Function________________________________________________________

def wxr_creator(csv_file_in,wxr_file_out):

			post=''
			spamReader = csv.reader(open(csv_file_in, 'rb'), delimiter=',', quotechar='"')
			field=spamReader.next()# Read first csv field
			if field:# test csv input file if there is fields
				
				if (len(field)== 11):# test csv input file if there is 11 rows
					if (field[0] == 'custom_field__referenceid' and field[1]=='custom_field__attachment' and field[2]=='post_title' and field[3]=='post_categories' and field[4]=='custom_field__publish_date' and field[5]=='custom_field__source' and field[6]=='custom_field__sourceurl' and field[7]=='post_excerpt' and field[8]=='post_tags' and field[9]=='post_post' and field[10]=='creator'):# test csv input file if rows are aranged as desired
						field=spamReader.next()# read the next field
						while (field and (len(field) == 11) ):# read all fields
							
							post =post + Item(field[0],field[1],field[2],field[3],field[4],field[5],field[6],field[7], field[8],field[9],field[10])# create items (posts) one after another (concatenation)
							try:# try to read next csv fields
								field=spamReader.next()
							except StopIteration:# stop when there is no fields create the wxr file and stop
								
								post = Header() + post + Footer()
								posts=post
								break
					else:
						print '\n\n\t\t\t\tThe first field should contains the row\'s names and aranged as follow:\ncustom_field__referenceid,custom_field__attachment,post_title,post_categories,custom_field__publish_date, custom_field__source,custom_field__sourceurl,post_excerpt,post_tags,post_post,creator\n\n\n'
				else:
					print '\n\n\t\t\t\tThere is a missing field in your .csv...\n\t\t\t\tcheck the creator field, your csv should contains 11 fields \n\n'
			else:
				print 'Check your first csv row, Please don\'t leave blanks'

			return posts










# Run the main 
def main ():
	if len(sys.argv)==3:
		csv_file_in=sys.argv[1]
		wxr_file_out=sys.argv[2]
		if os.path.isfile(csv_file_in): # test csv input file existance
			if csv_file_in[-4:]=='.csv' and wxr_file_out[-4:]=='.wxr' : # verify if the input is .csv file and output .wxr			
				outfile=open(wxr_file_out,"w") 
				wxr_file_out = wxr_file_out[:-4]+'.xml'
				outfile.write(wxr_creator(csv_file_in,wxr_file_out))
				print '\n\n\t\t\t\t All posts were created\n\n'
			else:
				print '\n\n\t\t\t\t please check your input/output files extension\n\n'
		else:
			print '\n\n\t\t\t\t"' +csv_file_in+'" input file doesn\'t exist\n\n'

	else: 
		if len(sys.argv)==2 and sys.argv[1]!="--help" and sys.argv[1]!="?":
			print '\n\n\t\t\t\tWorning!... \n\t\t\t\tPlease give a .csv as an input and a .wxr as an output\n\t\t\t\texample: towxr input.csv output.wxr \n\t\t\t\tFor help type: \n\t\t\t\t\t towxr --help \n\t\t\t\t\t or \n\t\t\t\t\t towxr ?\n\n' 


	if len(sys.argv)==2:
		if (sys.argv[1]=="--help" or sys.argv[1]=="?"  ):
			print '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n________________________________________HELP_____________________________________________\n\nTo run the script: towxr input.csv output.wxr\nthe csv file should be as a first argument and the wxr as a second\n\n\tYour csv should contains 11 rows ranged as follow: \n\ncustom_field__referenceid,custom_field__attachment,post_title ,post_categories, custom_field__publish_date,custom_field__source, custom_field__sourceurl,post_excerpt,post_tags,post_post,creator       \n\n________________________________________END HELP_____________________________________________\n\n'


	if len(sys.argv)==1:
			print '\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n________________________________________HELP_____________________________________________\n\nTo run the script: towxr input.csv output.wxr\nthe csv file should be as a first argument and the wxr as a second\n\n\tYour csv should contains 11 rows ranged as follow: \n\ncustom_field__referenceid,custom_field__attachment,post_title ,post_categories, custom_field__publish_date,custom_field__source, custom_field__sourceurl,post_excerpt,post_tags,post_post,creator       \n\n________________________________________END HELP_____________________________________________\n\n'







if __name__ == "__main__":
    main()









